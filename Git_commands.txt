1. Setup the name and email that will be attached to your commits and tags:

$ git config --global user.name "Augustas Karpavicius"
$ git config --global user.email "karpavicius@arcnl.nl"

2. Sart a project: create a local repository, to initialise the current directory as a git repo:

$ git init <directory>
$ git clone <url>  # Download a remote repo (i.e. PRA)

3. Add files to staging:

$ git add <file>
$ git add ./ git add --all/ git add -A  # Stage all files

4. Committing:

$ git commit -m "commit message"  # Commit all staged files to git
$ git commit -am "commit message"  # Add all changes made to tracked files and commit (without staging)

5. Reviewing your repository:

$ ls  # list the files in the current directory

$ git status  # List new or modified files not yet committed
$ git status --short  # Show changes in a more compact way: ?? - Untracked, A - Staged, M - Modified, D - deleted

$ git log  # List commit history with respective IDs
$ git log --oneline  # Shorter commit history without committer

$ git diff  # Show changes to unstaged files. For changes to staged files, add --cached option
$ git diff commit1_ID commit2_ID  # Show changes between two commits

$ gitk  # Shows visualisation of different branches

5. Branches:

$ git branch  # List all local branches. Add -r flag to show all remote branches, -a flag to all branches.
$ git branch -a  # To see al local and remote branches (-r to only see the remote branches)
$ git branch <new-branch-name>  # Create a new branch
$ git checkout <branch>  # Switch to a branch and update the working directory
$ git checkout -b <new-branch-name>  # Create a new branch and switch to it
$ git branch -d <branch>  # Delete a branch (we would use -D if it doesn't matter whether the branch is merged or not)
$ git tag <tag-name>  # Add a tag to current commit

6. Merging and rebasing

$ git checkout b  # Switch to the branche into which we merge the other branch (i.e. master)
$ git merga a  # Merge branch a into branch b. Add --no-ff option for no-fast-forward merge
$ git merge --squash a  # merge and squash all commits into the new commit

$ git checkout feature  # First we checkout to the branch that we want to rebase onto another branch
$ git rebase main  # Rebase feature branch onto main (to incorporate new changtes made to main). Prevents unnecessary merga commits into feature, keeping history clean
$ git rebase -i main  # Interatively clean up a branches commits before rebasing onto main
$ git rebase -i Head~3  # Interatively rebase the last 3 commits on current branch

7. Synchronizing 

$ git remote add <alias> <url>  # Add a remote repository
$ git remote add origin <url>  # Specifies that you are adding a remote repository as an origin to your local Git repo
$ git remote  # View all remote connections. Add -v flag to view url
$ git remote remove <alias>  # Remove a connection
$ git remote rename <old> <new>  # Rename a connection

$ git push <alias>  # Upload local content to remote repository
$ git push --set-upstream origin master  # push master branch to the origin url, and set it as the default remote branch
$ git push <alias> <branch>  # Upload to a branch (can then pull request)

$ git fetch <alias>  # Fetch all branches from remote repository (no merge) (gets all the change history of a tracked branch/repo)
$ git fetch <alias> <branch>  # Fetch a specific branch

$ git pull <alias>  # Fetch the remote repository's copy of the current branch, then merge
$ git pull --rebase <alias>  # Move (rebase) your local changes onto the top of new changes made to the remote repo(for clean, lienar history)

$ git clone <url>  # Clone the repository from the GitHub
$ git clone <url> myfolder  # clone a repository to a specific folder


8. Extras

$ rm -rf .git/hooks  # Remove git hooks before commiti
